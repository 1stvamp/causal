#! /usr/bin/env python

"""CLI script to generate a buildout.cfg with the correct
environment variables and requirements.
"""

import os
import sys
import shutil
import subprocess
from optparse import OptionParser

template = """[buildout]
parts = dependencies
        django
develop = %(cwd)s
eggs =
        causal
        %(eggs)s
versions = versions
%(findlinks)s

[dependencies]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}

[django]
recipe = isotoma.recipe.django
project = causal
settings = settings
eggs = ${buildout:eggs}
wsgi = true

[versions]
zc.recipe.egg = 1.0.0
%(versions)s
"""

usage = """usage: %prog [options]"""
parser = OptionParser(usage=usage)

parser.add_option("-b", "--base", dest="base", action="store_true",
	help="only install base requirements")
parser.add_option("-m", "--modules", dest="extra_modules",
	help="comma seperated list of extra python modules to bake in")

def main():
	file_path = os.path.dirname(__file__)
	(options, pos_args) = parser.parse_args()

	print "Reading requirements.txt"
	requirements = open('requirements.txt', 'r').readlines()
	if not options.base:
		print "Reading extras_requirements.txt"
		requirements += open('extras_requirements.txt', 'r').readlines()

        if options.extra_modules:
                extra_modules = [m.strip() for m in options.extra_modules.split(',')]
                if len(extra_modules) > 0:
                        requirements.extend(extra_modules)
	eggs = []
	special_eggs = []
	versions = []
	find_links = []
	for req in requirements:
		if "://" in req:
			req_bits = req.split("#")
			req = req_bits[1]
			url = req_bits[0]
			find_links.append("find-links = %s" % (url,))
		if "=" in req:
			if ">=" in req:
				(name, version) = req.split('>=')
				op = '>='
			elif "<=" in req:
				(name, version) = req.split('<=')
				op = '<='
			elif "<" in req:
				(name, version) = req.split('<=')
				op = '<'
			elif ">" in req:
				(name, version) = req.split('<=')
				op = '>'
			else:
				(name, version) = req.split('==')
				op = '='
			if name != "Django":
				versions.append("%s %s %s" % (name, op, version,))
		else:
			name = req
		if name != "Django":
			eggs.append(name.strip())

	out = template % {
		'cwd': os.path.realpath(file_path),
		'eggs': "\n        ".join(eggs),
		'versions': "".join(versions),
		'findlinks': "".join(find_links),
	}

	print "Writing config to ./buildout.cfg"
	f = open(os.path.join(file_path, 'buildout.cfg'), 'w+')
	f.write(out)
	f.close()
	return 0

if __name__ == "__main__":
	sys.exit(main())
